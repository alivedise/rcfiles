.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Out 3"
.TH Out 3 "2007-09-15" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Time::Out \- Easily timeout long running operations
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Time::Out qw(timeout) ;
.Ve
.PP
.Vb 7
\&  timeout $nb_secs => sub {
\&    # your code goes were and will be interrupted if it runs
\&    # for more than $nb_secs seconds.
\&  } ;
\&  if ($@){
\&    # operation timed-out
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Time::Out\*(C'\fR provides an easy interface to \fI\fIalarm\fI\|(2)\fR based timeouts. 
Nested timeouts are supported.
.Sh "\s-1RETURN\s0 \s-1VALUE\s0"
.IX Subsection "RETURN VALUE"
\&'timeout' returns whatever the code placed inside the block returns:
.PP
.Vb 1
\&  use Time::Out qw(timeout) ;
.Ve
.PP
.Vb 4
\&  my $rc = timeout 5 => sub {
\&        return 7 ;
\&  } ;
\&  # $rc == 7
.Ve
.ie n .SH """Time::HiRes"""
.el .SH "\f(CWTime::HiRes\fP"
.IX Header "Time::HiRes"
If \f(CW\*(C`Time::Out\*(C'\fR sees that \f(CW\*(C`Time::HiRes\*(C'\fR has been loaded, it will use 
that 'alarm' function (if available) instead of the default one, allowing 
float timeout values to be used effectively:
.PP
.Vb 2
\&  use Time::Out ;
\&  use Time::HiRes ;
.Ve
.PP
.Vb 3
\&  timeout 3.1416 => sub {
\&        # ...
\&  } ;
.Ve
.SH "BUGS"
.IX Header "BUGS"
.IP "Blocking I/O on MSWin32" 4
.IX Item "Blocking I/O on MSWin32"
\&\fI\fIalarm\fI\|(2)\fR doesn't interrupt blocking I/O on MSWin32, so 'timeout' won't
do that either.
.IP "@_" 4
.IX Item "@_"
One drawback to using 'timeout' is that it masks \f(CW@_\fR in the affected code. 
This happens because the affected code is actually wrapped inside another 
subroutine that provides it's own \f(CW@_\fR. You can get around this by 
specifically passing your \f(CW@_\fR (or whatever you want for that matter) to 
\&'timeout' as such:
.Sp
.Vb 1
\&  use Time::Out ;
.Ve
.Sp
.Vb 5
\&  sub test {
\&    timeout 5, @_ => sub {
\&      print "$_[0]\en" ;
\&    } ;
\&  }
.Ve
.Sp
.Vb 1
\&  test("hello") ; # will print "hello\en" ;
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
eval, closures, \fI\fIalarm\fI\|(2)\fR, Sys::AlarmCall
.SH "AUTHOR"
.IX Header "AUTHOR"
Patrick LeBoutillier, <patl@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2005 by Patrick LeBoutillier
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. 
