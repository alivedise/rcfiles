.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Shell::GetEnv 3"
.TH Shell::GetEnv 3 "2008-07-09" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Shell::GetEnv \- extract the environment from a shell after executing commands
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Shell::GetEnv;
.Ve
.PP
.Vb 3
\&  $env = Shell::GetEnv->new( $shell, $command );
\&  $envs = $env->envs( %opts )
\&  $env->import_envs( %opts );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBShell::GetEnv\fR provides a facility for obtaining changes made to
environmental variables as the result of running shell scripts.  It
does this by causing a shell to invoke a series of user provided shell
commands (some of which might source scripts) and having the shell
process store its environment (using a short Perl script) into a
temporary file, which is parsed by \fBShell::Getenv\fR.
.PP
Communications with the shell subprocess may be done via standard \s-1IPC\s0
(via a pipe), or may be done via the Perl \fBExpect\fR module (necessary
if proper execution of the shell script requires the shell to be
attached to a \*(L"real\*(R" terminal).
.PP
The new environment may be imported into the current one, or may be
returned either as a hash or as a string suitable for use with the
*NIX \fBenv\fR command.
.SH "METHODS"
.IX Header "METHODS"
.IP "new" 4
.IX Item "new"
.Vb 1
\&  $env = Shell::GetEnv->new( $shell, @cmds, \e%attrs );
.Ve
.Sp
Start the shell specified by \fI$shell\fR, run the passed commands, and
retrieve the environment.  Note that only shell built-in
commands can actually change the shell's environment, so typically
the commands source a startup file.  For example:
.Sp
.Vb 1
\&  $env = Shell::GetEnv->new( 'tcsh', 'source foo.csh' );
.Ve
.Sp
The supported shells are:
.Sp
.Vb 1
\&  csh tcsh bash sh ksh
.Ve
.Sp
Attributes:
.RS 4
.IP "Startup \fIboolean\fR" 4
.IX Item "Startup boolean"
If true, the user's shell startup files are invoked.  This flag is
supported for \f(CW\*(C`csh\*(C'\fR, \f(CW\*(C`tcsh\*(C'\fR, and \f(CW\*(C`bash\*(C'\fR.  This is emulated under
\&\fBksh\fR using its \fB\-p\fR flag, which isn't quite the same thing.
.Sp
There seems to be no clean means of turning off startup file
processing under the other shells.
.Sp
This defaults to \fItrue\fR.
.IP "Echo \fIboolean\fR" 4
.IX Item "Echo boolean"
If true, put shell is put in echo mode.  This is only of use when the
\&\fB\s-1STDOUT\s0\fR attribute is used.  It defaults to \fIfalse\fR.
.IP "Interactive \fIboolean\fR" 4
.IX Item "Interactive boolean"
If true, put the shell in interactive mode. Some shells do not react
well when put in interactive mode but not connected to terminals.
Try using the \fBExpect\fR option instead. This defaults to \fIfalse\fR.
.IP "Redirect \fIboolean\fR" 4
.IX Item "Redirect boolean"
If true, redirect the output and error streams (see also the \f(CW\*(C`STDERR\*(C'\fR
and \f(CW\*(C`STDOUT\*(C'\fR options).  Defaults to true.
.IP "Verbose \fIboolean\fR" 4
.IX Item "Verbose boolean"
If true, put the shell in verbose mode.  This is only of use when the
\&\fB\s-1STDOUT\s0\fR attribute is used.  It defaults to \fIfalse\fR.
.IP "\s-1STDERR\s0 \fIfilename\fR" 4
.IX Item "STDERR filename"
Normally output from the shells' standard error stream is discarded.
This may be set to a file name to which the stream
should be written.  See also the \f(CW\*(C`Redirect\*(C'\fR option.
.IP "\s-1STDOUT\s0 \fIfilename\fR" 4
.IX Item "STDOUT filename"
Normally output from the shells' standard output stream is discarded.
This may be set to a file name to which the stream
should be written.  See also the \f(CW\*(C`Redirect\*(C'\fR option.
.IP "Expect \fIboolean\fR" 4
.IX Item "Expect boolean"
If true, the Perl \fBExpect\fR module is used to communicate with the
subshell.  This is useful if it is necessary to simulate connection
with a terminal, which may be important when setting up some
enviroments.
.IP "Timeout \fIinteger\fR" 4
.IX Item "Timeout integer"
The number of seconds to wait for a response from the shell when using
\&\fBExpect\fR.  It defaults to 10 seconds.
.IP "ShellOpts \fIscalar\fR or \fIarrayref\fR" 4
.IX Item "ShellOpts scalar or arrayref"
Arbitrary options to be passed to the shell.
.RE
.RS 4
.RE
.IP "envs" 4
.IX Item "envs"
.Vb 1
\&  $env = $env->envs( [%opt] );
.Ve
.Sp
Return the environment.  Typically the environment is returned as a
hashref, but if the \fBEnvStr\fR option is true it will be returned as a
string suitable for use with the *NIX \fBenv\fR command.  If no options
are specified, the entire environment is returned.
.Sp
The following options are recognized:
.RS 4
.IP "DiffsOnly \fIboolean\fR" 4
.IX Item "DiffsOnly boolean"
If true, the returned environment contains only those variables which
are new or which have changed from the current environment.  There is no way of
indicating Variables which have been \fIdeleted\fR.
.IP "Exclude \fIarray\fR or \fIscalar\fR" 4
.IX Item "Exclude array or scalar"
This specifies variables to exclude from the returned environment.  It
may be either a single value or an array of values.
.Sp
A value may be a string (for an exact match of a variable name), a regular
expression created with the \fBqr\fR operator, or a subroutine
reference.  The subroutine will be passed two arguments, the variable
name and its value, and should return true if the variable should be
excluded, false otherwise.
.IP "EnvStr \fIboolean\fR" 4
.IX Item "EnvStr boolean"
If true, a string representation of the environment is returned,
suitable for use with the *NIX \fBenv\fR command.  Appropriate quoting is
done so that it is correclty parsed by shells.
.Sp
If the \fBZapDeleted\fR option is also specified (and is true) variables
which are present in the current environment but \fInot\fR in the new one
are explicitly deleted by inserting \f(CW\*(C`\-u variablename\*(C'\fR in the output
string.  \fBNote\fR, however, that not all versions of \fBenv\fR recognize the
\&\fB\-u\fR option (e.g. those in Solaris or \s-1OS\s0 X).  In those cases, to ensure the
correct environment, use \f(CW\*(C`DiffsOnly =\*(C'\fR 0, ZapDeleted => 0> and
invoke \fBenv\fR with the \f(CW\*(C`\-i\*(C'\fR option.
.RE
.RS 4
.RE
.IP "import_envs" 4
.IX Item "import_envs"
.Vb 1
\&  $env->import_envs( %opt )
.Ve
.Sp
Import the new environment into the current one.  The available
options are:
.RS 4
.IP "Exclude \fIarray\fR or \fIscalar\fR" 4
.IX Item "Exclude array or scalar"
This specifies variables to exclude from the returned environment.  It
may be either a single value or an array of values.
.Sp
A value may be a string (for an exact match of a variable name), a regular
expression created with the \fBqr\fR operator, or a subroutine
reference.  The subroutine will be passed two arguments, the variable
name and its value, and should return true if the variable should be
excluded, false otherwise.
.IP "ZapDeleted \fIboolean\fR" 4
.IX Item "ZapDeleted boolean"
If true, variables which are present in the current environment but
\&\fInot\fR in the new one are deleted from the current environment.
.RE
.RS 4
.RE
.Sh "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None by default.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There are other similar modules on \s-1CPAN\s0. Shell::Source is simpler,
Shell::EnvImporter is a little more heavyweight (requires Class::MethodMaker).
.PP
This module's unique features:
.IP "can use Expect for the times you really need a terminal" 4
.IX Item "can use Expect for the times you really need a terminal"
.PD 0
.IP "uses a tiny Perl program to get the environmental variables rather than parsing shell output" 4
.IX Item "uses a tiny Perl program to get the environmental variables rather than parsing shell output"
.IP "allows the capturing of shell output" 4
.IX Item "allows the capturing of shell output"
.IP "more flexible means of submitting commands to the shell" 4
.IX Item "more flexible means of submitting commands to the shell"
.PD
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
The \fBYAML::Tiny\fR module is preferred for saving the environment
(because of its smaller footprint); the \fBData::Dumper\fR module
will be used if it is not available.
.PP
The \fBExpect\fR module is required only if the \f(CW\*(C`Expect\*(C'\fR option is
specified.
.SH "AUTHOR"
.IX Header "AUTHOR"
Diab Jerius, <djerius@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2007 Smithsonian Astrophysical Observatory
.PP
This software is released under the \s-1GNU\s0 General Public License.  You
may find a copy at
.PP
.Vb 1
\&          http://www.gnu.org/licenses
.Ve
